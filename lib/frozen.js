// Generated by CoffeeScript 1.7.1
(function() {
  var Collection, Frozen, Model, Validation, extend,
    __slice = [].slice;

  Validation = (function() {
    function Validation() {}

    Validation.required = function(key, value, opts, model) {
      var _ref;
      if ((value == null) || value.trim() === '') {
        return (_ref = opts.message) != null ? _ref : 'Required';
      }
    };

    Validation.association = function(key, value, opts, model) {
      if ((value != null) && !value.isValid()) {
        return value.errors;
      }
    };

    return Validation;

  })();

  extend = function() {
    var from, froms, prop, to, value, _i, _len;
    to = arguments[0], froms = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = froms.length; _i < _len; _i++) {
      from = froms[_i];
      for (prop in from) {
        value = from[prop];
        if (from.hasOwnProperty(prop)) {
          to[prop] = value;
        }
      }
    }
    return to;
  };

  Model = (function() {
    function Model(attributes, force) {
      var association, error, errors, key, opts, type, validation, validator, value, _ref, _ref1;
      if (force == null) {
        force = false;
      }
      attributes = extend({}, attributes);
      errors = {};
      _ref = this.associations;
      for (key in _ref) {
        association = _ref[key];
        value = attributes[key];
        if (value == null) {
          continue;
        }
        if (value instanceof association) {
          if (force === value.force) {
            continue;
          }
          value = value.attributes;
        }
        attributes[key] = new association(value, force);
      }
      _ref1 = this.validations;
      for (key in _ref1) {
        validation = _ref1[key];
        value = attributes[key];
        if (!(force || (value != null))) {
          continue;
        }
        for (type in validation) {
          opts = validation[type];
          if (!opts) {
            continue;
          }
          validator = Validation[type];
          if (validator == null) {
            continue;
          }
          error = validator(key, value, opts, this);
          if (error == null) {
            continue;
          }
          errors[key] = error;
          break;
        }
      }
      Object.defineProperty(this, 'attributes', {
        value: Object.freeze(attributes)
      });
      Object.defineProperty(this, 'errors', {
        value: Object.freeze(errors)
      });
      Object.defineProperty(this, 'force', {
        value: force
      });
    }

    Model.prototype.get = function(key) {
      return this.attributes[key];
    };

    Model.prototype.set = function(attributes, force) {
      if (force == null) {
        force = this.force;
      }
      attributes = extend({}, this.attributes, attributes);
      return new this.constructor(attributes, force);
    };

    Model.prototype.validate = function() {
      return new this.constructor(this.attributes, true);
    };

    Model.prototype.isValid = function() {
      return Object.keys(this.errors).length === 0;
    };

    Model.prototype.toJSON = function() {
      var attributes, key;
      attributes = extend({}, this.attributes);
      for (key in this.associations) {
        if (attributes[key] == null) {
          continue;
        }
        attributes[key] = attributes[key].toJSON();
      }
      return attributes;
    };

    return Model;

  })();

  Collection = (function() {
    Collection.prototype.model = Model;

    function Collection(models) {
      var model;
      if (models == null) {
        models = [];
      }
      if (!(models instanceof Array)) {
        models = [models];
      }
      this.models = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = models.length; _i < _len; _i++) {
          model = models[_i];
          if (model instanceof Model) {
            _results.push(model);
          } else {
            _results.push(new this.model(model));
          }
        }
        return _results;
      }).call(this);
      this.length = this.models.length;
      Object.freeze(this.models);
    }

    Collection.prototype.at = function(key) {
      return this.models[key];
    };

    Collection.prototype.add = function(model) {
      var models;
      if (model == null) {
        model = {};
      }
      if (!(model instanceof Model)) {
        model = new this.model(model);
      }
      models = this.models.concat([model]);
      return new this.constructor(models);
    };

    Collection.prototype.change = function(key, attributes) {
      var index, model, models;
      models = (function() {
        var _i, _len, _ref, _results;
        _ref = this.models;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          model = _ref[index];
          if (index === key) {
            _results.push(model.set(attributes));
          } else {
            _results.push(model);
          }
        }
        return _results;
      }).call(this);
      return new this.constructor(models);
    };

    Collection.prototype.remove = function(key) {
      var index, model, models;
      models = (function() {
        var _i, _len, _ref, _results;
        _ref = this.models;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          model = _ref[index];
          if (index !== key) {
            _results.push(model);
          }
        }
        return _results;
      }).call(this);
      return new this.constructor(models);
    };

    Collection.prototype.map = function(callback, thisArg) {
      return this.models.map(callback, thisArg);
    };

    Collection.prototype.toJSON = function() {
      var model, _i, _len, _ref, _results;
      _ref = this.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        _results.push(model.toJSON());
      }
      return _results;
    };

    Collection.prototype.validate = function() {
      var model, models;
      models = (function() {
        var _i, _len, _ref, _results;
        _ref = this.models;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          _results.push(model.validate());
        }
        return _results;
      }).call(this);
      return new this.constructor(models);
    };

    Collection.prototype.isValid = function() {
      return this.models.reduce((function(a, e) {
        return a && e.isValid();
      }), true);
    };

    return Collection;

  })();

  Frozen = {
    Model: Model,
    Collection: Collection,
    Validation: Validation
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Frozen;
  } else {
    window.Frozen = Frozen;
  }

}).call(this);
