// Generated by CoffeeScript 1.7.1
(function() {
  var Collection, Entity, Frozen, Validation, extend,
    __slice = [].slice;

  Validation = (function() {
    function Validation() {}

    Validation.required = function(key, value, opts, entity) {
      var _ref;
      if ((value == null) || value.trim() === '') {
        return (_ref = opts.message) != null ? _ref : 'Required';
      }
    };

    Validation.association = function(key, value, opts, entity) {
      if ((value != null) && !value.isValid()) {
        return value.errors;
      }
    };

    return Validation;

  })();

  extend = function() {
    var from, froms, prop, to, value, _i, _len;
    to = arguments[0], froms = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = froms.length; _i < _len; _i++) {
      from = froms[_i];
      for (prop in from) {
        value = from[prop];
        if (from.hasOwnProperty(prop)) {
          to[prop] = value;
        }
      }
    }
    return to;
  };

  Entity = (function() {
    function Entity(attributes, options) {
      var association, error, errors, key, opts, type, validation, validator, value, _ref, _ref1;
      if (options == null) {
        options = {
          validate: true
        };
      }
      attributes = extend({}, attributes);
      errors = {};
      _ref = this.associations;
      for (key in _ref) {
        association = _ref[key];
        value = attributes[key];
        if (value == null) {
          continue;
        }
        if (value instanceof association) {
          if (options.validate === value.options.validate) {
            continue;
          }
          value = value.attributes;
        }
        attributes[key] = new association(value, options);
      }
      if (options.validate) {
        _ref1 = this.validations;
        for (key in _ref1) {
          validation = _ref1[key];
          value = attributes[key];
          if (!(options.validate === 'force' || (value != null))) {
            continue;
          }
          for (type in validation) {
            opts = validation[type];
            if (!opts) {
              continue;
            }
            validator = Validation[type];
            if (validator == null) {
              continue;
            }
            error = validator(key, value, opts, this);
            if (error == null) {
              continue;
            }
            errors[key] = error;
            break;
          }
        }
      }
      Object.defineProperty(this, 'attributes', {
        value: Object.freeze(attributes)
      });
      Object.defineProperty(this, 'errors', {
        value: Object.freeze(errors)
      });
      Object.defineProperty(this, 'options', {
        value: options
      });
    }

    Entity.prototype.get = function(key) {
      return this.attributes[key];
    };

    Entity.prototype.set = function(attributes, options) {
      if (options == null) {
        options = this.options;
      }
      attributes = extend({}, this.attributes, attributes);
      return new this.constructor(attributes, options);
    };

    Entity.prototype.validate = function(option) {
      var options;
      if (option == null) {
        option = 'force';
      }
      options = extend({}, this.options, {
        validate: option
      });
      return new this.constructor(this.attributes, options);
    };

    Entity.prototype.isValid = function() {
      return Object.keys(this.errors).length === 0;
    };

    Entity.prototype.toJSON = function() {
      var attributes, key;
      attributes = extend({}, this.attributes);
      for (key in this.associations) {
        if (attributes[key] == null) {
          continue;
        }
        attributes[key] = attributes[key].toJSON();
      }
      return attributes;
    };

    return Entity;

  })();

  Collection = (function() {
    Collection.prototype.entity = Entity;

    function Collection(entities) {
      var entity;
      if (entities == null) {
        entities = [];
      }
      if (!(entities instanceof Array)) {
        entities = [entities];
      }
      entities = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = entities.length; _i < _len; _i++) {
          entity = entities[_i];
          if (entity instanceof Entity) {
            _results.push(entity);
          } else {
            _results.push(new this.entity(entity));
          }
        }
        return _results;
      }).call(this);
      Object.defineProperty(this, 'entities', {
        value: Object.freeze(entities)
      });
      Object.defineProperty(this, 'length', {
        value: entities.length
      });
    }

    Collection.prototype.at = function(index) {
      return this.entities[index];
    };

    Collection.prototype.insert = function(index, entity) {
      var entities;
      if (entity == null) {
        entity = {};
      }
      entities = this.entities.slice(0, index);
      entities.push(entity);
      entities = entities.concat(this.entities.slice(index));
      return new this.constructor(entities);
    };

    Collection.prototype.push = function(entity) {
      if (entity == null) {
        entity = {};
      }
      return this.insert(this.length, entity);
    };

    Collection.prototype.change = function(index, attributes) {
      var entities, entity, idx;
      entities = (function() {
        var _i, _len, _ref, _results;
        _ref = this.entities;
        _results = [];
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          entity = _ref[idx];
          if (index === idx) {
            _results.push(entity.set(attributes));
          } else {
            _results.push(entity);
          }
        }
        return _results;
      }).call(this);
      return new this.constructor(entities);
    };

    Collection.prototype.remove = function(index) {
      var entities, entity, idx;
      entities = (function() {
        var _i, _len, _ref, _results;
        _ref = this.entities;
        _results = [];
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          entity = _ref[idx];
          if (index !== idx) {
            _results.push(entity);
          }
        }
        return _results;
      }).call(this);
      return new this.constructor(entities);
    };

    Collection.prototype.validate = function() {
      var entities, entity;
      entities = (function() {
        var _i, _len, _ref, _results;
        _ref = this.entities;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entity = _ref[_i];
          _results.push(entity.validate());
        }
        return _results;
      }).call(this);
      return new this.constructor(entities);
    };

    Collection.prototype.isValid = function() {
      return this.entities.reduce((function(a, e) {
        return a && e.isValid();
      }), true);
    };

    Collection.prototype.map = function(callback, thisArg) {
      return this.entities.map(callback, thisArg);
    };

    Collection.prototype.toJSON = function() {
      var entity, _i, _len, _ref, _results;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.toJSON());
      }
      return _results;
    };

    return Collection;

  })();

  Frozen = {
    Entity: Entity,
    Collection: Collection,
    Validation: Validation
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Frozen;
  } else {
    window.Frozen = Frozen;
  }

}).call(this);
