// Generated by CoffeeScript 1.7.1
(function() {
  var Collection, Frozen, Model, extend,
    __slice = [].slice;

  extend = function() {
    var from, froms, prop, to, value, _i, _len;
    to = arguments[0], froms = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = froms.length; _i < _len; _i++) {
      from = froms[_i];
      for (prop in from) {
        value = from[prop];
        if (from.hasOwnProperty(prop)) {
          to[prop] = value;
        }
      }
    }
    return to;
  };

  Model = (function() {
    function Model(attributes) {
      var error, prop, value, _name, _ref;
      if (attributes == null) {
        attributes = {};
      }
      this.attributes = Object.freeze(attributes);
      this.errors = {};
      _ref = this.attributes;
      for (prop in _ref) {
        value = _ref[prop];
        error = typeof this[_name = "" + prop + "Error"] === "function" ? this[_name](value) : void 0;
        if (error != null) {
          this.errors[prop] = error;
        }
      }
      Object.freeze(this.errors);
    }

    Model.prototype.get = function(prop) {
      return this.attributes[prop];
    };

    Model.prototype.set = function(prop, value) {
      var attributes;
      attributes = extend({}, this.attributes);
      attributes[prop] = value;
      return new this.constructor(attributes);
    };

    Model.prototype.toJSON = function() {
      return this.attributes;
    };

    Model.prototype.validProps = [];

    Model.prototype.validate = function() {
      var attributes, prop, _i, _len, _ref;
      attributes = extend({}, this.attributes);
      _ref = this.validProps;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        if (attributes[prop] == null) {
          attributes[prop] = '';
        }
      }
      return new this.constructor(attributes);
    };

    Model.prototype.isValid = function() {
      return Object.keys(this.errors).length === 0;
    };

    return Model;

  })();

  Collection = (function() {
    Collection.prototype.model = Model;

    function Collection(models) {
      var model;
      if (models == null) {
        models = [];
      }
      if (!(models instanceof Array)) {
        models = [models];
      }
      this.models = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = models.length; _i < _len; _i++) {
          model = models[_i];
          if (model instanceof Model) {
            _results.push(model);
          } else {
            _results.push(new this.model(model));
          }
        }
        return _results;
      }).call(this);
      this.length = this.models.length;
      Object.freeze(this.models);
    }

    Collection.prototype.at = function(key) {
      return this.models[key];
    };

    Collection.prototype.add = function(model) {
      var models;
      if (model == null) {
        model = {};
      }
      if (!(model instanceof Model)) {
        model = new this.model(model);
      }
      models = this.models.concat([model]);
      return new this.constructor(models);
    };

    Collection.prototype.change = function(key, prop, value) {
      var index, model, models;
      models = (function() {
        var _i, _len, _ref, _results;
        _ref = this.models;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          model = _ref[index];
          if (index === key) {
            _results.push(model.set(prop, value));
          } else {
            _results.push(model);
          }
        }
        return _results;
      }).call(this);
      return new this.constructor(models);
    };

    Collection.prototype.destroy = function(key) {
      var index, model, models;
      models = (function() {
        var _i, _len, _ref, _results;
        _ref = this.models;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          model = _ref[index];
          if (index !== key) {
            _results.push(model);
          }
        }
        return _results;
      }).call(this);
      return new this.constructor(models);
    };

    Collection.prototype.map = function(callback, thisArg) {
      return this.models.map(callback, thisArg);
    };

    Collection.prototype.toJSON = function() {
      var model, _i, _len, _ref, _results;
      _ref = this.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        _results.push(model.toJSON());
      }
      return _results;
    };

    Collection.prototype.validate = function() {
      var model, models;
      models = (function() {
        var _i, _len, _ref, _results;
        _ref = this.models;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          _results.push(model.validate());
        }
        return _results;
      }).call(this);
      return new this.constructor(models);
    };

    Collection.prototype.isValid = function() {
      return this.models.reduce((function(a, e) {
        return a && e.isValid();
      }), true);
    };

    return Collection;

  })();

  Frozen = {
    Model: Model,
    Collection: Collection
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Frozen;
  } else {
    window.Frozen = Frozen;
  }

}).call(this);
